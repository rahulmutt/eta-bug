From a5d4c19431b7422bf5734e4e825aaa50b45dae93 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Wed, 6 Dec 2017 18:08:40 +0530
Subject: [PATCH] Patched

---
 Data/Aeson/Types/Internal.hs | 50 ++++++++++++++++++++++++++------------------
 aeson.cabal                  |  6 ++++--
 2 files changed, 34 insertions(+), 22 deletions(-)

diff --git a/Data/Aeson/Types/Internal.hs b/Data/Aeson/Types/Internal.hs
index 46ec9f1..1027bb4 100644
--- a/Data/Aeson/Types/Internal.hs
+++ b/Data/Aeson/Types/Internal.hs
@@ -78,10 +78,13 @@ import Prelude ()
 import Prelude.Compat
 
 import Control.Applicative (Alternative(..))
-import Control.Arrow (first)
+-- import Control.Arrow (first)
 import Control.DeepSeq (NFData(..))
 import Control.Monad (MonadPlus(..), ap)
 import Data.Char (isLower, isUpper, toLower, isAlpha, isAlphaNum)
+#ifdef HAS_TRAMPOLINE
+import qualified Data.Function as F
+#endif
 import Data.Data (Data)
 import Data.Foldable (foldl')
 import Data.HashMap.Strict (HashMap)
@@ -98,14 +101,21 @@ import Data.Vector (Vector)
 import GHC.Generics (Generic)
 import qualified Control.Monad.Fail as Fail
 import qualified Data.HashMap.Strict as H
-import qualified Data.Scientific as S
+-- import qualified Data.Scientific as S
 import qualified Data.Vector as V
-import qualified Language.Haskell.TH.Syntax as TH
+-- import qualified Language.Haskell.TH.Syntax as TH
 
 #if !MIN_VERSION_unordered_containers(0,2,6)
 import Data.List (sort)
 #endif
 
+trampoline :: a -> a
+#ifdef HAS_TRAMPOLINE
+trampoline = F.trampoline
+#else
+trampoline = id
+#endif
+
 -- | Elements of a JSON path used to describe the location of an
 -- error.
 data JSONPathElement = Key Text
@@ -393,19 +403,19 @@ instance Hashable Value where
     hashWithSalt = hashValue
 
 -- @since 0.11.0.0
-instance TH.Lift Value where
-    lift Null = [| Null |]
-    lift (Bool b) = [| Bool b |]
-    lift (Number n) = [| Number (S.scientific c e) |]
-      where
-        c = S.coefficient n
-        e = S.base10Exponent n
-    lift (String t) = [| String (pack s) |]
-      where s = unpack t
-    lift (Array a) = [| Array (V.fromList a') |]
-      where a' = V.toList a
-    lift (Object o) = [| Object (H.fromList . map (first pack) $ o') |]
-      where o' = map (first unpack) . H.toList $ o
+-- instance TH.Lift Value where
+--     lift Null = [| Null |]
+--     lift (Bool b) = [| Bool b |]
+--     lift (Number n) = [| Number (S.scientific c e) |]
+--       where
+--         c = S.coefficient n
+--         e = S.base10Exponent n
+--     lift (String t) = [| String (pack s) |]
+--       where s = unpack t
+--     lift (Array a) = [| Array (V.fromList a') |]
+--       where a' = V.toList a
+--     lift (Object o) = [| Object (H.fromList . map (first pack) $ o') |]
+--       where o' = map (first unpack) . H.toList $ o
 
 -- | The empty array.
 emptyArray :: Value
@@ -423,23 +433,23 @@ emptyObject = Object H.empty
 
 -- | Run a 'Parser'.
 parse :: (a -> Parser b) -> a -> Result b
-parse m v = runParser (m v) [] (const Error) Success
+parse m v = trampoline $ runParser (m v) [] (const Error) Success
 {-# INLINE parse #-}
 
 -- | Run a 'Parser'.
 iparse :: (a -> Parser b) -> a -> IResult b
-iparse m v = runParser (m v) [] IError ISuccess
+iparse m v = trampoline $ runParser (m v) [] IError ISuccess
 {-# INLINE iparse #-}
 
 -- | Run a 'Parser' with a 'Maybe' result type.
 parseMaybe :: (a -> Parser b) -> a -> Maybe b
-parseMaybe m v = runParser (m v) [] (\_ _ -> Nothing) Just
+parseMaybe m v = trampoline $ runParser (m v) [] (\_ _ -> Nothing) Just
 {-# INLINE parseMaybe #-}
 
 -- | Run a 'Parser' with an 'Either' result type.  If the parse fails,
 -- the 'Left' payload will contain an error message.
 parseEither :: (a -> Parser b) -> a -> Either String b
-parseEither m v = runParser (m v) [] onError Right
+parseEither m v = trampoline $ runParser (m v) [] onError Right
   where onError path msg = Left (formatError path msg)
 {-# INLINE parseEither #-}
 
diff --git a/aeson.cabal b/aeson.cabal
index 957913a..9a84ab5 100644
--- a/aeson.cabal
+++ b/aeson.cabal
@@ -88,7 +88,7 @@ library
     Data.Aeson.Parser
     Data.Aeson.Text
     Data.Aeson.Types
-    Data.Aeson.TH
+    -- Data.Aeson.TH
 
     Data.Aeson.Encoding.Internal
     Data.Aeson.Internal
@@ -163,7 +163,7 @@ library
     ghc-options: -O2
 
   include-dirs: include
-  if impl(ghcjs) || !flag(cffi)
+  if impl(ghcjs) || impl(eta) || !flag(cffi)
     hs-source-dirs: pure
     other-modules: Data.Aeson.Parser.UnescapePure
   else
@@ -171,6 +171,8 @@ library
     cpp-options: -DCFFI
     hs-source-dirs: ffi
     other-modules: Data.Aeson.Parser.UnescapeFFI
+  if impl(eta >= 0.0.9.7)
+     cpp-options: -DHAS_TRAMPOLINE
 
 test-suite tests
   default-language: Haskell2010
-- 
2.7.4 (Apple Git-66)

